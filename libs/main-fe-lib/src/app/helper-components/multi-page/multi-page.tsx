import React from 'react';
import { MultiPagesConfiguration } from './dtd';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import Box from '@material-ui/core/Box';
import { DataStorageService } from '@sixempress/utilities';
import { CacheKeys } from '../../utils/enums/cache-keys.enum';
import { Helpers } from '../../utils/various/helpers';
import { RouterService } from '../../services/router/router-service';
import { RouteComponentProps } from '@sixempress/theme';

/**
 * Allows to have a tab switcher for multiple pages
 */
export abstract class MultiPage extends React.Component<RouteComponentProps> {
	
	/**
	 * An array of pages that will be possible to be seen from this component
	 * 
	 * If the array contains 1 element only, then the page selector won't be displayed,
	 * but it will display directly the page to see
	 */
	abstract getPages(): MultiPagesConfiguration[];

	render() {
		return (
			<>
				<MultiPageTabs pages={this.getPages()} {...this.props}/>
				<React_use_hook ruhName='sxmp_router_outlet' props={this.props} />
			</>
		);
	}

}

interface MPTState {
	tabValue: number,
}

interface MPTProps extends RouteComponentProps {
	pages: MultiPagesConfiguration[];
}

/**
 * EXPORTED FOR TESTING PURPOSES ONLY
 * 
 * This component contains the tab logic for the pages, it is separated as to not re-render the Outlet on tab-switch
 */
export class MultiPageTabs extends React.Component<MPTProps, MPTState> {

	/**
	 * Rappresents the url used to reach this page withouth any childrens
	 */
	private ownRootUrl: string;

	/**
	 * The pages generated by getPages()
	 */
	private pages: MultiPagesConfiguration[] = [];
	

	constructor(props: MPTProps) {
		super(props);
		this.pages = this.props.pages;
		Helpers.checkAttributes(this.pages);
		this.ownRootUrl = props.router.path;

		this.state = {tabValue: this.getTabValueUrl()};

		// if there is no desired URL, then fallback to a cached or default 0
		if (this.state.tabValue === -1 && this.pages.length) {
			const storedChildRoute = DataStorageService.localStorage.getItem(CacheKeys.multiPagePrefix + this.ownRootUrl);
			
			let idx = storedChildRoute ? this.pages.findIndex(p => p.routePath === storedChildRoute) : 0;
			if (idx === -1)
				idx = 0;
				
			const destination = this.pages[idx].routePath;
			
			this.state = {tabValue: idx};
			this.navigateToChild(destination, true);
		}

	}

	/**
	 * Returns the index of the active tab based on the current url
	 */
	private getTabValueUrl(): number {
		
		// Remove startin slash /  as childs dont have it
		const childsCurrRoute = window.location.pathname.replace(/\/$/, '').replace(this.ownRootUrl, '').replace(/^\//, '');

		// using indexOf instead of === to account for navigation to child routes
		// the page is not only /multipage/table
		// but also /multipage/table/child1/child2/...
		// so we ensure that the current route is STARTING with the path
		for (let i = 0; i < this.pages.length; i++)
			if (childsCurrRoute.indexOf(this.pages[i].routePath) === 0)
				return i;

		// no match
		return -1;
	}

	/**
	 * For tab click handler
	 */
	private navigateHandler = (e: React.MouseEvent<any>) => {
		this.switchTab(e.currentTarget.dataset.routePath);
	}

	/**
	 * Switches tab value in state and navigates
	 */
	private switchTab(routePath: string) {
		this.setState({tabValue: this.pages.findIndex(p => p.routePath === routePath)}, () => {
			this.navigateToChild(routePath);
		});
	}

	/**
	 * Navigates the url to the desired child and saves the path to cache
	 * @param routePath path to go to
	 * @param replaceMode replaces the current url
	 */
	private navigateToChild(routePath: string, replaceMode?: true) {
		DataStorageService.localStorage.setItem(CacheKeys.multiPagePrefix + this.ownRootUrl, routePath);
		RouterService.goto(this.ownRootUrl + '/' + routePath, replaceMode);
	}

	render() {
		if (this.pages.length < 2)
			return (null);

		const tabVal = this.state.tabValue;

		return (
			<>
				<Box mb={2}>
					<Tabs
						value={tabVal}
						indicatorColor="primary"
						variant="scrollable"
						textColor="primary"
					>
						{this.pages.map((p, idx) => <Tab key={idx} label={p.name} data-route-path={p.routePath} onClick={this.navigateHandler} />)}
					</Tabs>
				</Box>
			</>
		);
	}

}
